enum7 EStreamPacketType
{
    unconnected          0
    connect              1
    connect_ack          2
    unreliable           3
    unreliable_frag      4
    reliable             5
    reliable_frag        6
    ack                  7
    nack                 8
    disconnect           9
}

enum8 EStreamChannel {
    Discovery                                                   0
    Control                                                     1
    Stats                                                       2
    DataChannel1                                                3
    DataChannel2                                                4
    DataChannel3                                                5
    DataChannel4                                                6
    DataChannel5                                                7
    DataChannel6                                                8
}

enum8 EStreamDiscoveryMessage {
    PingRequest             1
    PingResponse            2
}

enum8 EStreamControlMessage {
    AuthenticationRequest                                       1
    AuthenticationResponse                                      2
    NegotiationInit                                             3
    NegotiationSetConfig                                        4
    NegotiationComplete                                         5
    ClientHandshake                                             6
    ServerHandshake                                             7
    StartNetworkTest                                            8
    KeepAlive                                                   9
    _LAST_SETUP_MESSAGE                                         15
    StartAudioData                                              50
    StopAudioData                                               51
    StartVideoData                                              52
    StopVideoData                                               53
    InputMouseMotion                                            54
    InputMouseWheel                                             55
    InputMouseDown                                              56
    InputMouseUp                                                57
    InputKeyDown                                                58
    InputKeyUp                                                  59
    InputGamepadAttached_OBSOLETE                               60
    InputGamepadEvent_OBSOLETE                                  61
    InputGamepadDetached_OBSOLETE                               62
    ShowCursor                                                  63
    HideCursor                                                  64
    SetCursor                                                   65
    GetCursorImage                                              66
    SetCursorImage                                              67
    DeleteCursor                                                68
    SetTargetFramerate                                          69
    InputLatencyTest                                            70
    GamepadRumble_OBSOLETE                                      71
    OverlayEnabled                                              74
    InputControllerAttached_OBSOLETE                            75
    InputControllerState_OBSOLETE                               76
    TriggerHapticPulse_OBSOLETE                                 77
    InputControllerDetached_OBSOLETE                            78
    VideoDecoderInfo                                            80
    SetTitle                                                    81
    SetIcon                                                     82
    QuitRequest                                                 83
    SetQoS                                                      87
    InputControllerWirelessPresence_OBSOLETE                    88
    SetGammaRamp                                                89
    VideoEncoderInfo                                            90
    InputControllerStateHID_OBSOLETE                            93
    SetTargetBitrate                                            94
    SetControllerPairingEnabled_OBSOLETE                        95
    SetControllerPairingResult_OBSOLETE                         96
    TriggerControllerDisconnect_OBSOLETE                        97
    SetActivity                                                 98
    SetStreamingClientConfig                                    99
    SystemSuspend                                               100
    SetControllerSettings_OBSOLETE                              101
    VirtualHereRequest                                          102
    VirtualHereReady                                            103
    VirtualHereShareDevice                                      104
    SetSpectatorMode                                            105
    RemoteHID                                                   106
    StartMicrophoneData                                         107
    StopMicrophoneData                                          108
    InputText                                                   109
    TouchConfigActive                                           110
    GetTouchConfigData                                          111
    SetTouchConfigData                                          112
    SaveTouchConfigLayout                                       113
    TouchActionSetActive                                        114
    GetTouchIconData                                            115
    SetTouchIconData                                            116
    InputTouchFingerDown                                        117
    InputTouchFingerMotion                                      118
    InputTouchFingerUp                                          119
    SetCaptureSize                                              120
    SetFlashState                                               121
    Pause                                                       122
    Resume                                                      123
    EnableHighResCapture                                        124
    DisableHighResCapture                                       125
    ToggleMagnification                                         126
    SetCapslock                                                 127
    SetKeymap                                                   128
    StopRequest                                                 129
    TouchActionSetLayerAdded                                    130
    TouchActionSetLayerRemoved                                  131
    RemotePlayTogetherGroupUpdate                               132
    SetInputTemporarilyDisabled                                 133
    SetQualityOverride                                          134
    SetBitrateOverride                                          135
}

enum8 EStreamDataMessage {
    Packet                                                      1
    Lost                                                        2
}

enum8 EStreamStatsMessage {
    FrameEvents                                                 1
    DebugDump                                                   2
    LogMessage                                                  3
    LogUploadBegin                                              4
    LogUploadData                                               5
    LogUploadComplete                                           6
}

struct TStreamPacketHeader
{
    byte_order                      little_endian;
    bool1                           has_crc;
    EStreamPacketType               type;
    uint8                           retransmitCount;
    uint8                           srcConnId;
    uint8                           dstConnId;
    EStreamChannel                  channel;
    int16                           fragmentId;
    uint16                          packetId;
    uint32                          sendTimestamp;
}

switch TStreamControlMessage
{
    case EStreamControlMessage::AuthenticationRequest :
        subproto(payload_size){dissector=protobuf}              message;
    case EStreamControlMessage::AuthenticationResponse :
        subproto(payload_size){dissector=protobuf}              message;
    case EStreamControlMessage::ClientHandshake :
        subproto(payload_size){dissector=protobuf}              message;
    case EStreamControlMessage::ServerHandshake :
        subproto(payload_size){dissector=protobuf}              message;
    default :
        raw(16)                                                 iv;
        raw(payload_size - 16)                                  encrypted;
}

switch TStreamPayload
{
    case EStreamPacketType::connect :
        uint32{de=print("crc32c('Connect')")}                   payload;
    case EStreamPacketType::connect_ack :
        uint32                                                  timestamp;
    case EStreamPacketType::ack :
        uint32                                                  timestamp;
    case EStreamPacketType::unconnected :
        EStreamDiscoveryMessage                                 discoveryMessageType;
        set                                                     payload_size = payload_size - 1;
        int32                                                   message_size;
        subproto(message_size){dissector=protobuf}              message;
        raw(payload_size - 4 - message_size)                    remaining;
    case EStreamPacketType::reliable :
        switch (channel)
        {
            case EStreamChannel::Control :
                EStreamControlMessage                           payloadType;
                set                                             payload_size = payload_size - 1;
                TStreamControlMessage(payloadType)              "";
            case EStreamChannel::Stats :
                EStreamStatsMessage                             payloadType;
                set                                             payload_size = payload_size - 1;
                if                                              (fragmentId == 0)
                {
                    subproto(payload_size){dissector=protobuf}  message;
                }
                else
                {
                    raw(payload_size)                           message;
                }
            default :
                raw(payload_size)                               payload;
        }
    case EStreamPacketType::unreliable :
        EStreamDataMessage                                      messageType;
        set                                                     payload_size = payload_size - 1;
        if                                                      (channel >= EStreamChannel::DataChannel1 && messageType == EStreamDataMessage::Packet && payload_size >= 12)
        {
            uint16                                              frameId;
            uint32                                              frameTimestamp;
            uint16                                              inputMark;
            uint32                                              inputRecvTimestamp;
            set                                                 payload_size = payload_size - 12;
#            if                                                  (payload_size > 7)
#            {
#                save_position                                   frame_body_start;
#                hide var uint32                                 find_nalu = frame_body_start + 7;
#                goto_position                                   find_nalu;
#                hide uint32                                     start_seq;
#                if                                              (start_seq == 1)
#                {
#                    goto_position                               frame_body_start;
#                    uint16                                      frameSequence;
#                    hide uint2                                  frameFlagsUnused;
#                    uint1                                       frameFlagsEncrypted;
#                    uint1                                       frameFlagsKeyFrame;
#                    uint1                                       frameFlagsFrameFinish;
#                    uint1                                       frameFlagsRes1Inc;
#                    uint1                                       frameFlagsNeedEscape;
#                    uint1                                       frameFlagsNeedStartSeqs;
#                    uint16                                      frameReserved1;
#                    uint16                                      frameReserved2;
#                    set                                         payload_size = payload_size - 7;
#                }
#            }
            raw(payload_size)                                   payload;
        }
        else
        {
            raw(payload_size)                                   payload;
        }
    default :
        raw(payload_size)                                       payload;
}

struct TStreamPacket
{
    TStreamPacketHeader             "";
    save_position                   payload_start;
    hide raw(*)                     payload_with_optional_crc;
    save_position                   payload_end;
    if                              (has_crc)
    {
        goto_position               payload_start;
        var int32                   payload_size = (payload_end - payload_start) / 8 - 4;
        TStreamPayload(type)        "";
        uint32                      crc32c; # crc32c(header + payload)
    }
    else
    {
        goto_position               payload_start;
        var int32                   payload_size = (payload_end - payload_start) / 8;
        TStreamPayload(type)        "";
  }
}